// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name RuiTuSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import CoreTelephony
import FMDB
import Foundation
@_exported import RuiTuSDK
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
@_exported import __ObjC
public struct Insert {
  public init(_ stmt: Swift.String? = nil)
}
extension RuiTuSDK.Insert {
  public func into(_ into: Swift.String) -> RuiTuSDK.Into
  public func into(_ table: RuiTuSDK.FFObject.Type) -> RuiTuSDK.Into
}
public typealias Parameters = [Swift.String : Any]
public enum RXDNetError : Swift.Error {
  case parseFailure
  case requestFailure(Swift.Error)
}
public typealias RXDResponse<T> = (Swift.Result<T, RuiTuSDK.RXDNetError>) -> Swift.Void where T : RuiTuSDK.RXDResponseData
public enum RXDContentType {
  case Json
  case Form
  public static func == (a: RuiTuSDK.RXDContentType, b: RuiTuSDK.RXDContentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RXDResponseData : Swift.Decodable {
  associatedtype D : Swift.Decodable
  var data: Self.D? { get set }
}
public class RXDResponseModel<R> : RuiTuSDK.RXDResponseData where R : Swift.Decodable {
  public var code: Swift.Int?
  public var msg: Swift.String?
  public var message: Swift.String?
  public var success: Swift.Bool?
  public var data: R?
  public var result: R?
  required public init(from decoder: Swift.Decoder) throws
  public typealias D = R
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RXDNetworkingConfiguration {
  public static var domain: Swift.String?
  public static var headers: RuiTuSDK.RXDHTTPHeaders
  public static func configDomain(_ domain: Swift.String)
  public static func configHeaders(_ headers: RuiTuSDK.RXDHTTPHeaders)
  public static func addHeaders(name: Swift.String, value: Swift.String)
  public static func updateHeaders(name: Swift.String, value: Swift.String)
  @objc deinit
}
public let RXD: RuiTuSDK.RXDNetworking<RuiTuSDK.RXDResponseModel<Swift.String>>
@_hasMissingDesignatedInitializers public class RXDNetworking<R> where R : RuiTuSDK.RXDResponseData {
  public var baseURL: Swift.String?
  public var interface: Swift.String?
  public var headers: RuiTuSDK.RXDHTTPHeaders
  public var contentType: RuiTuSDK.RXDContentType
  public var encoding: RuiTuSDK.RXDParameterEncoding
  public var operationQueue: Foundation.OperationQueue
  public var params: [Swift.String : Any]?
  public var response: R?
  public func GET(timeoutInterval: Foundation.TimeInterval = 60, encoding: RuiTuSDK.RXDParameterEncoding = RXDURLEncoding(), completion: @escaping RuiTuSDK.RXDResponse<R>)
  public func GET(parameters: [Swift.String : Any]?, timeoutInterval: Foundation.TimeInterval = 60, encoding: RuiTuSDK.RXDParameterEncoding = RXDURLEncoding(), completion: @escaping RuiTuSDK.RXDResponse<R>)
  public func POST(timeoutInterval: Foundation.TimeInterval = 60, encoding: RuiTuSDK.RXDParameterEncoding = RXDJsonEncoding(), completion: @escaping RuiTuSDK.RXDResponse<R>)
  public func POST(parameters: [Swift.String : Any]?, timeoutInterval: Foundation.TimeInterval = 60, encoding: RuiTuSDK.RXDParameterEncoding = RXDJsonEncoding(), completion: @escaping RuiTuSDK.RXDResponse<R>)
  public func request(parameters: RuiTuSDK.Parameters? = nil, method: RuiTuSDK.RXDHTTPMethod = .post, timeoutInterval: Foundation.TimeInterval = 60, encoding: RuiTuSDK.RXDParameterEncoding? = nil, completion: @escaping RuiTuSDK.RXDResponse<R>)
  @objc deinit
}
extension Swift.Decodable {
  public var rxd: RuiTuSDK.RXDNetworking<RuiTuSDK.RXDResponseModel<Self>> {
    get
    set
  }
  public static var rxd: RuiTuSDK.RXDNetworking<RuiTuSDK.RXDResponseModel<Self>> {
    get
    set
  }
  public var RXD: RuiTuSDK.RXDNetworking<RuiTuSDK.RXDResponseModel<Self>>.Type {
    get
    set
  }
  public static var RXD: RuiTuSDK.RXDNetworking<RuiTuSDK.RXDResponseModel<Self>>.Type {
    get
    set
  }
}
extension RuiTuSDK.RXDResponseData {
  public var rxd: RuiTuSDK.RXDNetworking<Self> {
    get
    set
  }
  public static var rxd: RuiTuSDK.RXDNetworking<Self> {
    get
    set
  }
  public var RXD: RuiTuSDK.RXDNetworking<Self>.Type {
    get
    set
  }
  public static var RXD: RuiTuSDK.RXDNetworking<Self>.Type {
    get
    set
  }
}
extension RuiTuSDK.RXDNetworking {
  @discardableResult
  public func interface(_ interface: Swift.String) -> Self
  @discardableResult
  public func headers(_ headers: RuiTuSDK.RXDHTTPHeaders) -> Self
  @discardableResult
  public func params(_ params: [Swift.String : Any]) -> Self
  @discardableResult
  public func params<P>(_ param: P) -> Self where P : Swift.Encodable
  @discardableResult
  public func encoding(_ encoding: RuiTuSDK.RXDParameterEncoding) -> Self
  @discardableResult
  public func baseURL(_ base: Swift.String) -> Self
  @discardableResult
  public func contentType(_ type: RuiTuSDK.RXDContentType) -> Self
  public var sync: Self {
    get
  }
  public var async: Self {
    get
  }
}
public struct FFDBTransaction {
}
extension RuiTuSDK.FFDBTransaction {
  public static func insert(_ object: RuiTuSDK.FFObject, _ columns: [Swift.String]? = nil, isRollback: ObjectiveC.ObjCBool? = false, completion: RuiTuSDK.UpdateResult?)
  public static func insert(_ table: RuiTuSDK.FFObject.Type, _ columns: [Swift.String], values: [Any], isRollback: ObjectiveC.ObjCBool? = false, completion: RuiTuSDK.UpdateResult?)
}
extension RuiTuSDK.FFDBTransaction {
  public static func select<T, U>(table: T.Type, columns: [Swift.String]? = nil, where condition: Swift.String? = nil, values: [Any]? = nil, limit: Swift.String? = nil, return type: U.Type, isRollback: ObjectiveC.ObjCBool? = false, completion: RuiTuSDK.QueryResult? = nil) where T : RuiTuSDK.FFObject, U : Swift.Decodable
  public static func select<T>(table: T.Type, columns: [Swift.String]? = nil, where condition: Swift.String? = nil, values: [Any]? = nil, order orderConditions: [(column: Swift.String, orderByType: RuiTuSDK.OrderByType)]? = nil, limit: Swift.String? = nil, isRollback: ObjectiveC.ObjCBool? = false, completion: RuiTuSDK.QueryResult? = nil) where T : RuiTuSDK.FFObject
}
extension RuiTuSDK.FFDBTransaction {
  public static func update(_ table: RuiTuSDK.FFObject.Type, set setFormat: Swift.String, where condition: Swift.String?, values: [Any]? = nil, isRollback: ObjectiveC.ObjCBool? = false, completion: RuiTuSDK.UpdateResult?)
}
extension RuiTuSDK.FFDBTransaction {
  public static func delete(_ table: RuiTuSDK.FFObject.Type, where condition: Swift.String? = nil, values: [Any]? = nil, isRollback: ObjectiveC.ObjCBool? = false, completion: RuiTuSDK.UpdateResult?)
}
extension RuiTuSDK.FFDBTransaction {
  public static func executeDBQuery(block: ((FMDB.FMDatabase, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>) -> ()))
  public static func executeDBUpdate(block: ((FMDB.FMDatabase, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>) -> ()))
}
extension RuiTuSDK.FFObject {
  public static func tableName() -> Swift.String
}
extension RuiTuSDK.FFObject {
  public static func select(where condition: Swift.String? = nil, values: [Any]? = nil, orderBy orderCondition: Swift.String? = nil, orderByType: RuiTuSDK.OrderByType? = nil) -> [RuiTuSDK.FFObject]?
  @discardableResult
  public static func delete(where condition: Swift.String? = nil, values: [Any]? = nil) -> Swift.Bool
  @discardableResult
  public static func insert(_ columns: [Swift.String], values: [Any]) -> Swift.Bool
  @discardableResult
  public static func update(set setFormat: Swift.String, where condition: Swift.String?, values: [Any]? = nil) -> Swift.Bool
  @discardableResult
  public func insert() -> Swift.Bool
  @discardableResult
  public func update() -> Swift.Bool
  @discardableResult
  public func delete() -> Swift.Bool
  public static func registerTable()
}
extension RuiTuSDK.FFObject {
  public var subType: RuiTuSDK.FFObject.Type {
    get
  }
  public static func columnsType() -> [Swift.String : Swift.String]
  public static func columnsOfSelf() -> Swift.Array<Swift.String>
  public func valueNotNullFrom(_ key: Swift.String) -> Any
}
extension RuiTuSDK.FIDRuntime {
  public var subType: Any.Type {
    get
  }
  public func valueFrom(_ key: Swift.String) -> Any?
}
@objc @_hasMissingDesignatedInitializers open class WeakScriptMessageDelegate : ObjectiveC.NSObject, WebKit.WKScriptMessageHandler {
  @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc deinit
}
public struct Values {
}
@_hasMissingDesignatedInitializers public class DeviceHelper {
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var modelName: Swift.String {
    get
  }
}
public struct Limit {
  public let stmt: Swift.String
}
extension RuiTuSDK.Limit {
  public func offset(_ offset: Swift.String) -> RuiTuSDK.Offset
}
@_inheritsConvenienceInitializers @objc public class RTBaseModule : ObjectiveC.NSObject {
  public var ruitu_sdk_color_primary: Swift.String?
  public var ruitu_sdk_color_secondary: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public struct Create {
  public init(_ stmt: Swift.String)
  public init(_ table: RuiTuSDK.FFObject.Type)
}
public struct Where {
  public let stmt: Swift.String
}
extension RuiTuSDK.Where {
  public func orderBy(_ orderBy: Swift.String) -> RuiTuSDK.OrderBy
  public func orderBy(_ orderConditions: [(column: Swift.String, orderByType: RuiTuSDK.OrderByType)]) -> RuiTuSDK.OrderBy
}
extension RuiTuSDK.Where {
  public func limit(_ limit: Swift.String?) -> RuiTuSDK.Limit
}
extension RuiTuSDK.Where {
  public func offset(_ offset: Swift.String) -> RuiTuSDK.Offset
}
public enum CarHomeType {
  case carHomeManagement
  case newAddress
  public static func == (a: RuiTuSDK.CarHomeType, b: RuiTuSDK.CarHomeType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class RTCarHomeModule : RuiTuSDK.RTBaseModule {
  @objc public init(vin: Swift.String)
  @objc public var vin: Swift.String
  public var pageType: RuiTuSDK.CarHomeType?
  @objc deinit
}
public struct Columns {
}
extension RuiTuSDK.Columns {
  public func values(_ count: Swift.Int) -> RuiTuSDK.Values
  public func values(_ values: Swift.String) -> RuiTuSDK.Values
}
public struct From {
  public let stmt: Swift.String
}
extension RuiTuSDK.From {
  public func `where`(_ where: Swift.String) -> RuiTuSDK.Where
}
extension RuiTuSDK.From {
  public func orderBy(_ orderBy: Swift.String) -> RuiTuSDK.OrderBy
  public func orderBy(_ orderConditions: [(column: Swift.String, orderByType: RuiTuSDK.OrderByType)]) -> RuiTuSDK.OrderBy
}
extension RuiTuSDK.From {
  public func limit(_ limit: Swift.String?) -> RuiTuSDK.Limit
}
extension RuiTuSDK.From {
  public func offset(_ offset: Swift.String) -> RuiTuSDK.Offset
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class RTNavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func pushViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func popViewController(animated: Swift.Bool) -> UIKit.UIViewController?
  @available(iOS 5.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension RuiTuSDK.RTNavigationController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension RuiTuSDK.RTNavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
}
public struct Update {
  public init(_ table: RuiTuSDK.FFObject.Type)
  public init(_ stmt: Swift.String? = nil)
}
extension RuiTuSDK.Update {
  public func set(_ set: Swift.String) -> RuiTuSDK.SetTT
  public func set(_ columns: [Swift.String]? = nil) -> RuiTuSDK.SetTT
}
public struct RXDHTTPMethod : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
  public static let connect: RuiTuSDK.RXDHTTPMethod
  public static let delete: RuiTuSDK.RXDHTTPMethod
  public static let get: RuiTuSDK.RXDHTTPMethod
  public static let head: RuiTuSDK.RXDHTTPMethod
  public static let options: RuiTuSDK.RXDHTTPMethod
  public static let patch: RuiTuSDK.RXDHTTPMethod
  public static let post: RuiTuSDK.RXDHTTPMethod
  public static let put: RuiTuSDK.RXDHTTPMethod
  public static let trace: RuiTuSDK.RXDHTTPMethod
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
public struct RXDHTTPHeaders {
  public init()
  public init(_ headers: [RuiTuSDK.RXDHTTPHeader])
  public init(_ dictionary: [Swift.String : Swift.String])
  public mutating func add(name: Swift.String, value: Swift.String)
  public mutating func add(_ header: RuiTuSDK.RXDHTTPHeader)
  public mutating func update(name: Swift.String, value: Swift.String)
  public mutating func update(_ header: RuiTuSDK.RXDHTTPHeader)
  public mutating func remove(name: Swift.String)
  public mutating func sort()
  public func sorted() -> RuiTuSDK.RXDHTTPHeaders
  public func value(for name: Swift.String) -> Swift.String?
  public subscript(name: Swift.String) -> Swift.String? {
    get
    set
  }
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
}
extension RuiTuSDK.RXDHTTPHeaders : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Swift.String)...)
  public typealias Key = Swift.String
  public typealias Value = Swift.String
}
extension RuiTuSDK.RXDHTTPHeaders : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: RuiTuSDK.RXDHTTPHeader...)
  public typealias ArrayLiteralElement = RuiTuSDK.RXDHTTPHeader
}
extension RuiTuSDK.RXDHTTPHeaders : Swift.Sequence {
  public func makeIterator() -> Swift.IndexingIterator<[RuiTuSDK.RXDHTTPHeader]>
}
extension RuiTuSDK.RXDHTTPHeaders : Swift.Collection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(position: Swift.Int) -> RuiTuSDK.RXDHTTPHeader {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public typealias Element = RuiTuSDK.RXDHTTPHeader
  public typealias Index = Swift.Int
  public typealias Indices = Swift.DefaultIndices<RuiTuSDK.RXDHTTPHeaders>
  public typealias Iterator = Swift.IndexingIterator<[RuiTuSDK.RXDHTTPHeader]>
  public typealias SubSequence = Swift.Slice<RuiTuSDK.RXDHTTPHeaders>
}
extension RuiTuSDK.RXDHTTPHeaders : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct RXDHTTPHeader : Swift.Hashable {
  public let name: Swift.String
  public let value: Swift.String
  public init(name: Swift.String, value: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: RuiTuSDK.RXDHTTPHeader, b: RuiTuSDK.RXDHTTPHeader) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension RuiTuSDK.RXDHTTPHeader : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension RuiTuSDK.RXDHTTPHeader {
  public static func accept(_ value: Swift.String) -> RuiTuSDK.RXDHTTPHeader
  public static func acceptCharset(_ value: Swift.String) -> RuiTuSDK.RXDHTTPHeader
  public static func acceptLanguage(_ value: Swift.String) -> RuiTuSDK.RXDHTTPHeader
  public static func acceptEncoding(_ value: Swift.String) -> RuiTuSDK.RXDHTTPHeader
  public static func authorization(username: Swift.String, password: Swift.String) -> RuiTuSDK.RXDHTTPHeader
  public static func authorization(bearerToken: Swift.String) -> RuiTuSDK.RXDHTTPHeader
  public static func authorization(_ value: Swift.String) -> RuiTuSDK.RXDHTTPHeader
  public static func contentDisposition(_ value: Swift.String) -> RuiTuSDK.RXDHTTPHeader
  public static func contentType(_ value: Swift.String) -> RuiTuSDK.RXDHTTPHeader
  public static func userAgent(_ value: Swift.String) -> RuiTuSDK.RXDHTTPHeader
}
extension RuiTuSDK.RXDHTTPHeaders {
  public static let `default`: RuiTuSDK.RXDHTTPHeaders
}
extension RuiTuSDK.RXDHTTPHeader {
  public static let defaultAcceptEncoding: RuiTuSDK.RXDHTTPHeader
  public static let defaultAcceptLanguage: RuiTuSDK.RXDHTTPHeader
  public static let defaultUserAgent: RuiTuSDK.RXDHTTPHeader
}
extension Foundation.URLRequest {
  public var headers: RuiTuSDK.RXDHTTPHeaders {
    get
    set
  }
}
extension Foundation.HTTPURLResponse {
  public var headers: RuiTuSDK.RXDHTTPHeaders {
    get
  }
}
extension Foundation.URLSessionConfiguration {
  public var headers: RuiTuSDK.RXDHTTPHeaders {
    get
    set
  }
}
public struct Select {
  public let stmt: Swift.String
  public init(_ columns: [Swift.String])
  public init(_ stmt: Swift.String)
}
extension RuiTuSDK.Select {
  public func from(_ from: Swift.String) -> RuiTuSDK.From
  public func from(_ table: RuiTuSDK.FFObject.Type) -> RuiTuSDK.From
}
public protocol RXDParameterEncoding {
  func encode(_ urlRequest: Foundation.URLRequest, with parameters: RuiTuSDK.Parameters?) -> Foundation.URLRequest
}
public struct RXDURLEncoding : RuiTuSDK.RXDParameterEncoding {
  public enum Destination {
    case url
    case httpBody
    public static func == (a: RuiTuSDK.RXDURLEncoding.Destination, b: RuiTuSDK.RXDURLEncoding.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init()
  public init(destination: RuiTuSDK.RXDURLEncoding.Destination)
  public func encode(_ urlRequest: Foundation.URLRequest, with parameters: RuiTuSDK.Parameters?) -> Foundation.URLRequest
}
public struct RXDJsonEncoding : RuiTuSDK.RXDParameterEncoding {
  public init()
  public func encode(_ urlRequest: Foundation.URLRequest, with parameters: RuiTuSDK.Parameters?) -> Foundation.URLRequest
}
public struct FMDBConnection : RuiTuSDK.FFDBConnection {
  public typealias T = FMDB.FMDatabase
  public static let share: RuiTuSDK.FMDBConnection
  public static var databasePath: Swift.String?
  public func executeDBQuery<R>(db: FMDB.FMDatabase?, return type: R.Type, sql: Swift.String, values: [Any]?, completion: RuiTuSDK.QueryResult?) throws where R : Swift.Decodable
  public func executeDBUpdate(db: FMDB.FMDatabase?, sql: Swift.String, values: [Any]?, completion: RuiTuSDK.UpdateResult?) throws
  public func databasePathURL() -> Foundation.URL
  public func database() -> RuiTuSDK.FMDBConnection.T
  public func findNewColumns(_ table: RuiTuSDK.FFObject.Type) -> [Swift.String]?
}
public struct FFDBSafeOperation {
}
extension RuiTuSDK.FFDBSafeOperation {
  public static func insert(_ object: RuiTuSDK.FFObject, _ columns: [Swift.String]? = nil, completion: RuiTuSDK.UpdateResult?)
  public static func insert(_ table: RuiTuSDK.FFObject.Type, _ columns: [Swift.String], values: [Any], completion: RuiTuSDK.UpdateResult?)
}
extension RuiTuSDK.FFDBSafeOperation {
  public static func select<T, U>(table: T.Type, columns: [Swift.String]? = nil, where condition: Swift.String? = nil, values: [Any]? = nil, limit: Swift.String? = nil, return type: U.Type, completion: RuiTuSDK.QueryResult?) where T : RuiTuSDK.FFObject, U : Swift.Decodable
  public static func select<T>(table: T.Type, columns: [Swift.String]? = nil, where condition: Swift.String? = nil, values: [Any]? = nil, limit: Swift.String? = nil, completion: RuiTuSDK.QueryResult? = nil) where T : RuiTuSDK.FFObject
}
extension RuiTuSDK.FFDBSafeOperation {
  public static func update(_ table: RuiTuSDK.FFObject.Type, set setFormat: Swift.String, where condition: Swift.String?, values: [Any]? = nil, completion: RuiTuSDK.UpdateResult?)
}
extension RuiTuSDK.FFDBSafeOperation {
  public static func delete(_ table: RuiTuSDK.FFObject.Type, where condition: Swift.String? = nil, values: [Any]? = nil, completion: RuiTuSDK.UpdateResult?)
}
extension RuiTuSDK.FFDBSafeOperation {
  public static func executeDBQuery(block: ((FMDB.FMDatabase) -> ()))
  public static func executeDBUpdate(block: ((FMDB.FMDatabase) -> ()))
}
public enum HealthManagerType {
  case faultList
  case faultDetail
  public static func == (a: RuiTuSDK.HealthManagerType, b: RuiTuSDK.HealthManagerType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class RTHealthManagerModule : RuiTuSDK.RTBaseModule {
  @objc public init(dtcId: Swift.String)
  public var pageType: RuiTuSDK.HealthManagerType?
  @objc public var dtcId: Swift.String?
  @objc deinit
}
public struct Delete {
  public init(_ stmt: Swift.String? = nil)
}
extension RuiTuSDK.Delete {
  public func from(_ table: RuiTuSDK.FFObject.Type) -> RuiTuSDK.From
  public func from(_ from: Swift.String) -> RuiTuSDK.From
}
public typealias QueryResult = (_ result: [Swift.Decodable]?) -> ()
public typealias UpdateResult = (_ result: Swift.Bool) -> ()
@_hasMissingDesignatedInitializers public class FFDB {
  public static var share: RuiTuSDK.FFDB
  public func connection() -> RuiTuSDK.FMDBConnection
  @objc deinit
}
public protocol FFDBConnection {
  associatedtype T
  static var databasePath: Swift.String? { get set }
  func database() -> Self.T
  func findNewColumns(_ table: RuiTuSDK.FFObject.Type) -> [Swift.String]?
  func executeDBQuery<R>(db: Self.T?, return type: R.Type, sql: Swift.String, values: [Any]?, completion: RuiTuSDK.QueryResult?) throws where R : Swift.Decodable
  func executeDBUpdate(db: Self.T?, sql: Swift.String, values: [Any]?, completion: RuiTuSDK.UpdateResult?) throws
}
public protocol FIDRuntime {
  init()
  var subType: Any.Type { get }
  func valueFrom(_ key: Swift.String) -> Any?
}
public protocol FFObject : RuiTuSDK.FIDRuntime, Swift.Decodable {
  static func registerTable()
  static func select(where condition: Swift.String?, values: [Any]?, orderBy orderCondition: Swift.String?, orderByType: RuiTuSDK.OrderByType?) -> [RuiTuSDK.FFObject]?
  @discardableResult
  static func delete(where condition: Swift.String?, values: [Any]?) -> Swift.Bool
  @discardableResult
  static func insert(_ columns: [Swift.String], values: [Any]) -> Swift.Bool
  @discardableResult
  static func update(set setFormat: Swift.String, where condition: Swift.String?, values: [Any]?) -> Swift.Bool
  @discardableResult
  func insert() -> Swift.Bool
  @discardableResult
  func update() -> Swift.Bool
  @discardableResult
  func delete() -> Swift.Bool
  static func columnsType() -> [Swift.String : Swift.String]
  func valueNotNullFrom(_ key: Swift.String) -> Any
  static func columnsOfSelf() -> Swift.Array<Swift.String>
  static func ignoreProperties() -> [Swift.String]?
  static func customColumnsType() -> [Swift.String : Swift.String]?
  static func customColumns() -> [Swift.String : Swift.String]?
  static func primaryKeyColumn() -> Swift.String
  static func tableName() -> Swift.String
}
public typealias CallBack = (_ result: Swift.Dictionary<Swift.String, Any>) -> Swift.Void
@_inheritsConvenienceInitializers @objc public class RuiTuClient : ObjectiveC.NSObject {
  @objc(startWithAppBaseUrl:webBaseUrl:httpHeader:receiveMark:completionHandler:) public static func start(apiBaseUrl: Swift.String, webBaseUrl: Swift.String, httpHeader: Swift.Dictionary<Swift.String, Any>, receiveMark: Swift.String?, completionHandler: @escaping RuiTuSDK.CallBack)
  @objc(getAuthDataWithAccessId:mobile:vin:userName:userId:relation:completionHandler:) public static func getAuthData(accessId: Swift.String, mobile: Swift.String, vin: Swift.String, userName: Swift.String, userId: Swift.String, relation: Swift.String, completionHandler: @escaping RuiTuSDK.CallBack)
  @objc(applyAccessWithInfoPacket:sign:completionHandler:) public static func applyAccess(infoPacket: Swift.String, sign: Swift.String, completionHandler: @escaping RuiTuSDK.CallBack)
  @objc(openRuiTuMainPageWithModule:callback:) public static func openMainPage(module: RuiTuSDK.RTMainModule, callback: @escaping RuiTuSDK.CallBack)
  @objc(openCarHomePageWithModule:callback:) public static func openCarHomePage(module: RuiTuSDK.RTCarHomeModule, callback: @escaping RuiTuSDK.CallBack)
  @objc(openHealthManagerPageWithModule:callback:) public static func openHealthManagerPage(module: RuiTuSDK.RTHealthManagerModule, callback: @escaping RuiTuSDK.CallBack)
  @objc(receiveMessageFromRuiTu:) public static func receiveMessageFromRuiTu(userInfo: [Swift.AnyHashable : Any])
  @objc override dynamic public init()
  @objc deinit
}
public struct FFDBManager {
}
extension RuiTuSDK.FFDBManager {
  @discardableResult
  public static func insert(_ object: RuiTuSDK.FFObject, _ columns: [Swift.String]? = nil, database db: FMDB.FMDatabase? = nil) throws -> Swift.Bool
  @discardableResult
  public static func insert(_ table: RuiTuSDK.FFObject.Type, _ columns: [Swift.String], values: [Any], database db: FMDB.FMDatabase? = nil) throws -> Swift.Bool
}
extension RuiTuSDK.FFDBManager {
  public static func select<T, U>(_ table: T.Type, _ columns: [Swift.String]? = nil, where condition: Swift.String? = nil, values: [Any]? = nil, order orderConditions: [(column: Swift.String, orderByType: RuiTuSDK.OrderByType)]? = nil, limit: Swift.String? = nil, return type: U.Type, database db: FMDB.FMDatabase? = nil) throws -> [Swift.Decodable]? where T : RuiTuSDK.FFObject, U : Swift.Decodable
  public static func select<T>(_ table: T.Type, _ columns: [Swift.String]? = nil, where condition: Swift.String? = nil, values: [Any]? = nil, order orderConditions: [(column: Swift.String, orderByType: RuiTuSDK.OrderByType)]? = nil, limit: Swift.String? = nil, database db: FMDB.FMDatabase? = nil) throws -> Swift.Array<Swift.Decodable>? where T : RuiTuSDK.FFObject
}
extension RuiTuSDK.FFDBManager {
  @discardableResult
  public static func update(_ table: RuiTuSDK.FFObject.Type, set setFormat: Swift.String, where condition: Swift.String?, values: [Any]? = nil, database db: FMDB.FMDatabase? = nil) throws -> Swift.Bool
  @discardableResult
  public static func update(_ table: RuiTuSDK.FFObject.Type, set setColumns: [Swift.String], where condition: Swift.String?, values: [Any]? = nil, database db: FMDB.FMDatabase? = nil) throws -> Swift.Bool
}
extension RuiTuSDK.FFDBManager {
  @discardableResult
  public static func delete(_ table: RuiTuSDK.FFObject.Type, where condition: Swift.String? = nil, values: [Any]? = nil, database db: FMDB.FMDatabase? = nil) throws -> Swift.Bool
}
extension RuiTuSDK.FFDBManager {
  public static func executeDBQuery<T>(db: FMDB.FMDatabase, return type: T.Type, sql: Swift.String, values: [Any]?) throws -> [Swift.Decodable]? where T : Swift.Decodable
  @discardableResult
  public static func executeDBUpdate(db: FMDB.FMDatabase, sql: Swift.String, values: [Any]?) throws -> Swift.Bool
}
extension RuiTuSDK.FFDBManager {
  public static func newUUID() -> Swift.String?
}
public struct Into {
}
extension RuiTuSDK.Into {
  public func columns(_ columns: Swift.String) -> RuiTuSDK.Columns
  public func columns(_ columns: [Swift.String]) -> RuiTuSDK.Columns
}
public struct Offset {
  public let stmt: Swift.String
}
@objc public class RTMainModule : RuiTuSDK.RTBaseModule {
  @objc public init(vin: Swift.String)
  @objc public var vin: Swift.String
  @objc deinit
}
public struct SetTT {
}
extension RuiTuSDK.SetTT {
  public func `where`(_ where: Swift.String) -> RuiTuSDK.Where
}
public enum OrderByType {
  case desc
  case asc
  public static func == (a: RuiTuSDK.OrderByType, b: RuiTuSDK.OrderByType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct OrderBy {
  public let stmt: Swift.String
}
extension RuiTuSDK.OrderBy {
  public func limit(_ limit: Swift.String?) -> RuiTuSDK.Limit
}
extension RuiTuSDK.OrderBy {
  public func offset(_ offset: Swift.String) -> RuiTuSDK.Offset
}
extension RuiTuSDK.RXDContentType : Swift.Equatable {}
extension RuiTuSDK.RXDContentType : Swift.Hashable {}
extension RuiTuSDK.CarHomeType : Swift.Equatable {}
extension RuiTuSDK.CarHomeType : Swift.Hashable {}
extension RuiTuSDK.RXDURLEncoding.Destination : Swift.Equatable {}
extension RuiTuSDK.RXDURLEncoding.Destination : Swift.Hashable {}
extension RuiTuSDK.HealthManagerType : Swift.Equatable {}
extension RuiTuSDK.HealthManagerType : Swift.Hashable {}
extension RuiTuSDK.OrderByType : Swift.Equatable {}
extension RuiTuSDK.OrderByType : Swift.Hashable {}
